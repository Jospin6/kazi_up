// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  username         String
  email            String   @unique
  password         String?
  role             UserRole @default(USER)
  avatar           Bytes?
  location         String?
  residencyCountry String?
  nationality      String?
  gender           String?
  website          String?
  github           String?
  twitter          String?
  linkedin         String?
  bio              String?
  skills           String?
  languages        String?
  available        String?
  timezone         String?
  annualpay        String?
  hourlypay        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  UserActivity UserActivity[]

  Job Job[]

  View View[]

  Applied Applied[]
}

model JobCategory {
  id    String @id @default(uuid())
  title String
  tags  String

  Job Job[]
}

model EmployementType {
  id    String @id @default(uuid())
  title String

  Job Job[]
}

model Job {
  id            String  @id @default(uuid())
  position      String  @db.VarChar(255)
  companyName   String  @db.VarChar(255)
  description   String
  primaryTag    String  @db.VarChar(255)
  tags          String? @db.Text
  jobRestricted String? @db.VarChar(255)
  remote        String  @db.VarChar(255)
  companyLogo   Bytes?
  howToApply    String? @db.Text
  salaryRange   String? @db.VarChar(255)
  website       String? @db.VarChar(500)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  User              User?            @relation(fields: [userId], references: [id])
  userId            String?
  JobCategory       JobCategory?     @relation(fields: [jobCategoryId], references: [id])
  jobCategoryId     String?
  EmployemenType    EmployementType? @relation(fields: [employementTypeId], references: [id])
  employementTypeId String?

  View View[]

  Applied Applied[]
}

model UserActivity {
  id          String       @id @default(uuid())
  type        ActivityType
  yearStart   String?
  yearEnd     String?
  title       String?
  company     String?
  url         String?
  email       String?
  description String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id        String   @id @default(uuid())
  jobId     String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Job       Job?     @relation(fields: [jobId], references: [id])
  createdAt DateTime @default(now())
}

model Applied {
  id        String   @id @default(uuid())
  jobId     String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Job       Job?     @relation(fields: [jobId], references: [id])
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum ActivityType {
  EXPERIENCE
  EDUCATION
  SIDE_PROJECT
}
